/*
 * Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 and
 * only version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

#ifndef __SMB235X_CHARGER_H
#define __SMB235X_CHARGER_H

#include <linux/bitops.h>

#define CHGR_BASE	0x1000
#define DCDC_BASE	0x1100
#define BATIF_BASE	0x1200
#define USBIN_BASE	0x1300
#define MISC_BASE	0x1600

/***********CHGR Peripheral Register***********/
#define BATTERY_CHARGER_STATUS_1_REG		(CHGR_BASE + 0x06)
#define BATTERY_CHARGER_STATUS_MASK		GENMASK(2, 0)

#define BATTERY_CHARGER_STATUS_2_REG		(CHGR_BASE + 0x07)
#define CHARGER_ERROR_STATUS_SFT_EXPIRE_BIT	BIT(2)
#define CHARGER_ERROR_STATUS_BAT_OV_BIT		BIT(1)
#define CHARGER_ERROR_STATUS_BAT_TERM_MISSING_BIT	BIT(0)

#define BATTERY_CHARGER_STATUS_7_REG		(CHGR_BASE + 0x0D)
#define BAT_TEMP_STATUS_HOT_SOFT_BIT		BIT(5)
#define BAT_TEMP_STATUS_COLD_SOFT_BIT		BIT(4)
#define BAT_TEMP_STATUS_TOO_HOT_BIT		BIT(3)
#define BAT_TEMP_STATUS_TOO_COLD_BIT		BIT(2)

#define CHGR_STEP_CHG_SOC_VBATT_V_REG		(CHGR_BASE + 0x40)
#define CHGR_STEP_CHG_SOC_VBATT_V_UPDATE_REG	(CHGR_BASE + 0x41)
#define CHGR_STEP_SOC_VBATT_V_UPDATE_BIT	BIT(0)

#define CHARGING_ENABLE_CMD_REG			(CHGR_BASE + 0x42)
#define CHARGING_ENABLE_BIT			BIT(0)

#define CHGR_CFG2_REG				(CHGR_BASE + 0x51)
#define SOC_BASED_RECHG_BIT				BIT(1)
#define CHARGER_INHIBIT_BIT			BIT(0)

#define CHGR_TRICKLE_CHARGE_CURRENT_CFG_REG	(CHGR_BASE + 0x5F)
#define CHGR_PRE_CHARGE_CURRENT_CFG_REG		(CHGR_BASE + 0x60)
#define CHGR_FAST_CHARGE_CURRENT_CFG_REG	(CHGR_BASE + 0x61)
#define CHGR_CHARGE_CURRENT_TERMINATION_CFG_REG	(CHGR_BASE + 0x62)
#define CHGR_MAX_PRE_CHARGER_CURRENT_CFG_REG	(CHGR_BASE + 0x65)
#define CHGR_MAX_FAST_CHARGE_CURRENT_CFG_REG	(CHGR_BASE + 0x66)
#define CHGR_FLOAT_VOLTAGE_CFG_REG		(CHGR_BASE + 0x70)
#define CHARGE_INHIBIT_THRESHOLD_CFG_REG	(CHGR_BASE + 0x72)
#define CHARGE_INHIBIT_THRESHOLD_MASK		GENMASK(1, 0)
#define INHIBIT_ANALOG_VFLT_MINUS_100MV		0
#define INHIBIT_ANALOG_VFLT_MINUS_200MV		1
#define INHIBIT_ANALOG_VFLT_MINUS_400MV		2
#define INHIBIT_ANALOG_VFLT_MINUS_600MV		3

#define CHGR_RCHG_SOC_THRESHOLD_CFG_REG		(CHGR_BASE + 0x7D)
#define JEITA_EN_CFG_REG			(CHGR_BASE + 0x90)
#define CHGR_JEITA_THRESHOLD_BASE_REG(i)	(CHGR_BASE + 0x94 + (i * 2))
#define CHGR_JEITA_FVCOMP_COLD_CFG		(CHGR_BASE + 0x86)
#define CHGR_JEITA_FVCOMP_HOT_CFG		(CHGR_BASE + 0x91)
#define CHGR_JEITA_CCCOMP_HOT_CFG		(CHGR_BASE + 0x92)
#define CHGR_JEITA_CCCOMP_COLD_CFG		(CHGR_BASE + 0x93)

#define CHGR_FAST_CHARGE_SAFETY_TIMER_CFG_REG	(CHGR_BASE + 0xA2)
#define CHGR_STEP_CHG_MODE_CFG_REG		(CHGR_BASE + 0xB0)
#define CHGR_STEP_CHG_MODE_CFG_MASK		GENMASK(3, 1)
#define STEP_CHARGING_SOC_FAIL_OPTION_BIT	BIT(3)
#define STEP_CHARGING_MODE_SELECT_BIT		BIT(2)
#define STEP_CHARGING_SOURCE_SELECT		BIT(1)
#define STEP_CHARGING_ENABLE			BIT(0)

#define CHGR_STEP_CHG_SOC_OR_BATT_V_UPDATE_REQUEST_TIMEOUT_CFG_REG	(CHGR_BASE + 0xB1)
#define CHGR_STEP_CHG_SOC_OR_BATT_V_UPDATE_FAIL_TIMEOUT_CFG_REG		(CHGR_BASE + 0xB2)
#define CHGR_STEP_CHG_THRESHOLD_BASE_REG(i)				(CHGR_BASE + 0xB3 + i)

/*********DCDC Peripheral Register***********/
#define DCDC_ICL_MAX_STATUS_REG		(DCDC_BASE + 0x06)
#define DCDC_AICL_ICL_STATUS_REG	(DCDC_BASE + 0x08)
#define DCDC_POWER_PATH_STATUS_REG	(DCDC_BASE + 0x0B)
#define USE_USBIN_BIT				BIT(4)
#define VALID_INPUT_POWER_SOURCE_STS_BIT	BIT(0)

#define DCDC_OTG_CURRENT_LIMIT_CFG_REG	(DCDC_BASE + 0x52)
#define OTG_CURRENT_LIMIT_MASK		GENMASK(2, 0)

#define DCDC_OTG_CFG_REG		(DCDC_BASE + 0x53)
#define OTG_EN_SRC_CFG_BIT		BIT(1)

/**********BATIF Peripheral Register***********/
#define BATIF_INT_RT_STS_OFFSET_REG		(BATIF_BASE + 0x10)
#define BAT_TERMINAL_MISSING_RT_STS_BIT		BIT(5)
#define BAT_THERM_OR_ID_MISSING_RT_STS_BIT	BIT(4)
#define BAT_TEMP_RT_STS_BIT			BIT(0)

#define BATIF_BAT_MISS_SRC_CFG_REG		(BATIF_BASE + 0x70)

/*****************USBIN********************/
#define USB_APSD_STATUS_REG		(USBIN_BASE + 0x07)
#define HVDCP_CHECK_TIMEOUT_BIT		BIT(6)
#define SLOW_PLUGIN_TIMEOUT_BIT		BIT(5)
#define ENUMERATION_DONE_BIT		BIT(4)
#define VADP_CHANGE_DONE_AFTER_AUTH_BIT	BIT(3)
#define QC_AUTH_DONE_STATUS_BIT		BIT(2)
#define QC_CHARGER_BIT			BIT(1)
#define APSD_DTC_STATUS_DONE_BIT	BIT(0)

#define USB_APSP_RESULT_STATUS_REG	(USBIN_BASE + 0x08)
#define APSD_RESULT_STATUS_MASK		GENMASK(6, 0)
#define QC_3P0_BIT			BIT(6)
#define QC_2P0_BIT			BIT(5)
#define FLOAT_CHARGER_BIT		BIT(4)
#define DCP_CHARGER_BIT			BIT(3)
#define CDP_CHARGER_BIT			BIT(2)
#define OCP_CHARGER_BIT			BIT(1)
#define SDP_CHARGER_BIT			BIT(0)

#define USB_QC_CHANGE_STATUS_REG	(USBIN_BASE + 0x09)
#define QC_CONTINUOUS		BIT(3)
#define QC_12V_BIT			BIT(2)
#define QC_9V_BIT			BIT(1)
#define QC_5V_BTI			BIT(0)

#define USB_QC_PILSE_COUNT_STATUS_REG	(USBIN_BASE + 0x0A)
#define USB_INT_RT_STS_OFFSET_REG	(USBIN_BASE + 0x10)
#define USBIN_PLUGIN_RT_STS_BIT		BIT(4)

#define USB_CMD_APSD_REG		(USBIN_BASE + 0x41)
#define USB_APSD_RERUN_BIT		BIT(0)

#define USB_CMD_ICL_OVERRIDE_REG	(USBIN_BASE + 0x42)
#define ICL_OVERRIDE_BIT		BIT(0)

#define USB_CMD_HVDCP_2_REG		(USBIN_BASE + 0x43)
#define FORCE_12V_BIT		BIT(5)
#define FORCE_9V_BIT		BIT(4)
#define FORCE_5V_BIT		BIT(3)
#define SINGLE_DECREMENT_BIT	BIT(1)
#define SINGLE_INCREMENT_BIT	BIT(0)

#define USB_HVDCP_PULSE_COUNT_MAX	(USBIN_BASE + 0x5B)
#define HVDCP_PULSE_COUNT_MAX_QC2P0_BIT	GENMASK(7, 6)
#define HVDCP_PULSE_COUNT_MAX_QC3P0_BIT	GENMASK(5, 0)

#define USBIN_OPTIONS_1_CFG_REG		(USBIN_BASE + 0x62)
#define USBIN_HVDCP_AUTH_ALG_EN_BIT	BIT(6)
#define USBIN_HVDCP_AUTONOMOUS_MODE_EN_BIT	BIT(5)
#define USBIN_APSD_ENABLE_BIT		BIT(3)
#define USBIN_HVDCP_EN_BIT			BIT(2)

#define USBIN_OPTIONS_2_CFG_REG		(USBIN_BASE + 0x63)
#define FLOAT_OPTIONS_MASK		GENMASK(2, 0)
#define FLOAT_DIS_CHGING_CFG_BIT	BIT(2)
#define SUSPEND_FLOAT_CFG_BIT		BIT(1)
#define FORCE_FLOAT_SDP_CFG_BIT		BIT(0)

#define USBIN_LOAD_CFG_REG		(USBIN_BASE + 0x65)
#define ICL_OVERRIDE_AFTER_APSD_BIT	BIT(4)

#define USBIN_CURRENT_LIMIT_CFG_REG	(USBIN_BASE + 0x70)
#define USBIN_AICL_OPTIONS_CFG_REG	(USBIN_BASE + 0x80)
#define USBIN_AICL_PERIODIC_RERUN_EN_BIT	BIT(4)
#define USBIN_AICL_EN_BIT			BIT(2)

/****************MISC Peripheral Register************/
#define MISC_BARK_BITE_WDOG_PET_REG	(MISC_BASE + 0x43)
#define BARK_BITE_WDOG_PET_BIT		BIT(0)

#define MISC_WD_CFG_REG			(MISC_BASE + 0x51)
#define BARK_WDOG_INT_EN_BIT		BIT(6)
#define WDOG_TIMER_EN_ON_PLUGIN_BIT	BIT(1)

enum float_option {
	FLOAT_SDP = 1,
	DISABLE_CHARGING = 2,
	SUSPEND_INPUT = 3,
};

enum {
	INHIBIT_CHARGE = 0,
	TRICKLE_CHARGE,
	PRE_CHARGE,
	FULLON_CHARGE,
	TAPER_CHARGE,
	TERMINATE_CHARGE,
	PAUSE_CHARGE,
	DISABLE_CHARGE,
};

enum smb235x_irq_index {
	CHRG_ERROR_IRQ = 0,
	CHGR_STATE_CHANGE_IRQ,
	OTG_FAIL_IRQ,
	INPUT_CURRENT_LIMITING_IRQ,
	BAT_TEMP_IRQ,
	BAT_OV_IRQ,
	BAT_LOW_IRQ,
	BAT_THERM_OR_ID_MISSING_IRQ,
	BAT_TERMINAL_MISSING_IRQ,
	USBIN_COLLAPSE_IRQ,
	USBIN_VASHDN_IRQ,
	USBIN_UV_IRQ,
	USBIN_OV_IRQ,
	USBIN_PLUGIN_IRQ,
	USBIN_SRC_CHANGE_IRQ,
	USBIN_ICL_CHANGE_IRQ,
	AICL_DONE_IRQ,
	TEMP_CHANGE_IRQ,
	WDOG_BARK_IRQ,
};

#endif
